use_clauses
region
cube cex cexprime cexprev
index zero maxframes currframe stkptr i j k l
$$

zero = 0
currframe = 0
stkptr = 0
maxframes = 100
CNF_ARR[currframe] = I

SAT(CNF_ARR[currframe] ^ notP ^ T, cex)
if (cex){
	++stkptr
	CLS_ARR[stkptr] = cex
	return 0
}

++currframe
while(currframe < maxframes){
	SAT(CNF_ARR[currframe] ^ notP ^ T, cex)
	if (cex){

		++stkptr
		CLS_ARR[stkptr] = cex
		--currframe

		while(stkptr > 0){
			if (currframe < 0){
				return 0
			}
			else{
				cex = CLS_ARR[stkptr]
				i = 1
				while (i <= currframe){
					CNF_ARR[i] ^= cex
					++i
				}

				cexprime = cex
				PRIME(cexprime)
				SAT(CNF_ARR[currframe] ^ T ^ cexprime, cexprev)

				if (cexprev){
					++stkptr
					CLS_ARR[stkptr] = cexprev
					--currframe
				}
				else{
					--stkptr
					++currframe
					CNF_ARR[currframe] ^= cex
				}

			}
		}
	}
	else{
		++currframe
	}

	# PROP_CLAUSES(zero, currframe)
	i = 0
	j = 1
	while(i < currframe){
		l = SIZE(CNF_ARR[i])
		k = 0
		while(k < l){
			cex = CNF_ARR[i][k]
			cexprime = cex
			PRIME(cexprime)
			SAT(CNF_ARR[i] ^ T ^ cexprime, cexprime)
			if (cexprime){
			}
			else{
				CNF_ARR[j] ^= cex
				# BREAK
			}
			++k
		}

		++i
		++j
	}


	i = 0
	j = 1
	while (i < currframe){
		if(CNF_ARR[i] == CNF_ARR[j]){
			return 1
		}
		++i
		++j
	}

}


return 0

