use_clauses
region
cube cex cexprime cexprev
index zero maxframes currframe stkptr i j k l
collection cls_set
$$

zero = 0
currframe = 0
stkptr = 0
maxframes = 100
CNF_ARR[currframe] = I

cex = check_safety(CNF_ARR[currframe])
if (cex){
	++stkptr
	CLS_ARR[stkptr] = cex
	return 0
}

++currframe
while(currframe < maxframes){
	cex = check_safety(CNF_ARR[currframe])
	if (cex){

		++stkptr
		CLS_ARR[stkptr] = cex
		--currframe

		while(stkptr > 0){
			if (currframe < 0){
				return 0
			}
			else{
				cex = CLS_ARR[stkptr]
				i = 1
				while (i <= currframe){
					CNF_ARR[i] ^= cex
					++i
				}

				cexprev = pre_state(CNF_ARR[currframe], cex, 0)
				if (cexprev){
					++stkptr
					CLS_ARR[stkptr] = cexprev
					--currframe
				}
				else{
					--stkptr
					++currframe
					CNF_ARR[currframe] ^= cex
				}

			}
		}
	}
	else{
		++currframe
	}

	# PROP_CLAUSES(zero, currframe)
	i = 0
	j = 1
	while(i < currframe){
		cls_set = conj_decomp(CNF_ARR[i], 0)
		for(cex : cls_set){
			cexprev = pre_state(CNF_ARR[i], cex, 0)
			if (cexprev){

			}
			else{
				CNF_ARR[j] ^= cex
			}
		}
		++i
		++j
	}


	# CHECK_FRAMES_EQUAL(zero, currframe)
	i = 0
	j = 1
	while (i < currframe){
		cex = subsume(CNF_ARR[j], CNF_ARR[i])
		if(cex){
		}
		else{
			return 1
		}
		++i
		++j
	}

}
return 0
